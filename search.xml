<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>my second blog</title>
    <url>/2020/09/15/my-second-blog/</url>
    <content><![CDATA[<p>大家好，今天是9月15日，离图像分析大作业验收还有10天，10天之内学会matlab完成大作业，验收完成。《红楼梦》，中国古代章回体长篇小说，中国古典四大名著之一，一般认为是清代作家曹雪芹所著。小说以贾、史、王、薛四大家族的兴衰为背景，以富贵公子贾宝玉为视角，以贾宝玉与林黛玉、薛宝钗的爱情婚姻悲剧为主线，描绘了一批举止见识出于须眉之上的闺阁佳人的人生百态，展现了真正的人性美和悲剧美，可以说是一部从各个角度展现女性美以及中国古代社会世态百相的史诗性著作。</p>
<a id="more"></a>
<p>《红楼梦》版本可分为120回“程本”和80回“脂本”两大系统。程本为程伟元排印的印刷本，脂本为脂砚斋在不同时期抄评的早期手抄本。脂本是程本的底本。<br>《红楼梦》是一部颇具世界影响力的人情小说，举世公认的中国古典小说巅峰之作，中国封建社会的百科全书，传统文化的集大成者。小说以“大旨谈情，实录其事”自勉，只按自己的事体情理，按迹循踪，摆脱旧套，新鲜别致，取得了非凡的艺术成就。“真事隐去，假语村言”的特殊笔法更是令后世读者脑洞大开，揣测之说久而遂多。二十世纪以来，学术界因《红楼梦》异常出色的艺术成就和丰富深刻的思想底蕴而产生了以《红楼梦》为研究对象的专门学问——红学。<br>手稿解析故事脉络</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>My First Blog</title>
    <url>/2020/09/15/My-First-Blog/</url>
    <content><![CDATA[<h1 id="我叫阴兵鸟哥"><a href="#我叫阴兵鸟哥" class="headerlink" title="我叫阴兵鸟哥"></a>我叫阴兵鸟哥</h1>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/17/%E4%BA%8C%E7%BB%B4%E5%9B%BE%E5%83%8F%E7%9A%84%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="傅里叶变换理解"><a href="#傅里叶变换理解" class="headerlink" title="傅里叶变换理解"></a>傅里叶变换理解</h2><h2 id="matlab实现二维图像傅里叶变换"><a href="#matlab实现二维图像傅里叶变换" class="headerlink" title="matlab实现二维图像傅里叶变换"></a>matlab实现二维图像傅里叶变换</h2><h3 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h3><h4 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h4><p>编写程序对此二维图像（自行转换为灰度图）展开傅里叶变换，提取傅里叶变换图像（将频率原点移至图像中心），并形成实验报告</p>
<p><img src="C:\matlab\HUST.jpg"></p>
<h4 id="实验准备-1"><a href="#实验准备-1" class="headerlink" title="实验准备"></a>实验准备</h4><p>因为此前对于matlab不太了解，但实验要求建议使用matlab完成实验，所以趁此机会我也能够熟悉matlab的使用，并且了解matlab中自带的图像处理函数。在理解完傅立叶变换的物理意义之后我提出四种方案：</p>
<p>1.利用定义求解此二维图像的傅立叶变换；</p>
<p>2.利用傅立叶变换的可分离性降低算法复杂度；</p>
<p>3.利用快速傅立叶变换进一步降低算法复杂度；</p>
<p>4.调用系统函数实现实验要求并且进行对比；</p>
<p>但在进行利用傅立叶变换定义进行代码实现时，此图片像素大小为785*442，时间复杂度过高，程序长时间无法运行出结果，故在这里不进行傅立叶变换定义的代码与结果展示。</p>
<h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><h4 id="1-利用傅立叶定义"><a href="#1-利用傅立叶定义" class="headerlink" title="1.利用傅立叶定义"></a>1.利用傅立叶定义</h4><p><img src="C:\Users\86153\Desktop\傅立叶变换定义.png"></p>
<p>由公式可得，复杂度为o(n^4）;</p>
<h4 id="可分离性傅立叶变换"><a href="#可分离性傅立叶变换" class="headerlink" title="可分离性傅立叶变换"></a>可分离性傅立叶变换</h4><p><img src="C:\Users\86153\Desktop\分离性傅立叶变换.png"></p>
<p><img src="C:\Users\86153\Desktop\分离性傅立叶变换原理图.png"></p>
<p>由原理图可知，此算法时间复杂度为o（n^3）;</p>
<h4 id="快速傅立叶变换"><a href="#快速傅立叶变换" class="headerlink" title="快速傅立叶变换"></a>快速傅立叶变换</h4><p>核心思想是分解傅立叶定义公式，分为奇偶两列，消除冗余，一次分解可以减少近一半的运算量，而如果N=2^M，则可以进行M次分解；原理如下：</p>
<p><img src="C:\Users\86153\Desktop\快速1.PNG"></p>
<p><img src="C:\Users\86153\Desktop\快速2.PNG"></p>
<p><img src="C:\Users\86153\Desktop\快速3.PNG"></p>
<p><img src="C:\Users\86153\Desktop\快速4.PNG"></p>
<h5 id="算法程序"><a href="#算法程序" class="headerlink" title="算法程序"></a>算法程序</h5><p>1.先利用nextpow2求解灰度图矩阵行列数最接近2次幂的数字M1，M2，令N1=2^M1,N2=2^M2,且依次为基础构造N1*N2的矩阵,目的是为了能够完整构造行列数都是2的整次幂的矩阵，便于分解。</p>
<p>2.扩充存放傅里叶变换结果的矩阵m,若该矩阵的行列数小于N1或者N2，对其尾部补0。</p>
<p>3.对m矩阵的行，列分别进行倒序，之后分别对于逆序后矩阵的行，列进行蝶形运算。（invert函数实现对矩阵行列的逆序，DieXing函数实现蝶形运算，但需要temp参数分离对行，列的操作，temp=0对行逆序并蝶形运算，temp=1对列逆序并蝶形操作）</p>
<p>4.蝶形运算的核心思想：分解后的旋转因子,行为<code>W=exp(-j*2*/pi/N2)</code>，列为<code>W=exp(-j*2*/pi/N1)</code>;先求出前半部分的傅里叶变换，在此基础上求出后半部分的傅里叶变换。</p>
<p>5.输出傅里叶变换频谱图。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="调用系统函数"><a href="#调用系统函数" class="headerlink" title="调用系统函数"></a>调用系统函数</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">img = imread(<span class="string">&#x27;HUST.jpg&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);imshow(img);title(<span class="string">&#x27;原图&#x27;</span>);</span><br><span class="line">f=rgb2gray(img);    <span class="comment">%对于RGB图像必须做的一步，也可以用im2double函数</span></span><br><span class="line">F=fft2(f);          <span class="comment">%傅里叶变换</span></span><br><span class="line">F1=<span class="built_in">log</span>(<span class="built_in">abs</span>(F)+<span class="number">1</span>);   <span class="comment">%取模并进行缩放</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>);imshow(F1,[]);title(<span class="string">&#x27;傅里叶变换频谱图&#x27;</span>);</span><br><span class="line">recover=ifft2(F);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>);imshow(recover,[]);title(<span class="string">&#x27;恢复图像&#x27;</span>);</span><br><span class="line">Fs=fftshift(F);      <span class="comment">%将频谱图中零频率成分移动至频谱图中心</span></span><br><span class="line">S=<span class="built_in">log</span>(<span class="built_in">abs</span>(Fs)+<span class="number">1</span>);    <span class="comment">%取模并进行缩放</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>);imshow(S,[]);title(<span class="string">&#x27;频移后的频谱图&#x27;</span>);</span><br><span class="line">fr=<span class="built_in">real</span>(ifft2(ifftshift(Fs)));  <span class="comment">%频率域反变换到空间域，并取实部</span></span><br><span class="line">ret=im2uint8(mat2gray(fr));    <span class="comment">%更改图像类型</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>);imshow(ret),title(<span class="string">&#x27;逆傅里叶变换&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="分离性傅立叶变换"><a href="#分离性傅立叶变换" class="headerlink" title="分离性傅立叶变换"></a>分离性傅立叶变换</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%主程序</span></span><br><span class="line">img = imread(<span class="string">&#x27;HUST.jpg&#x27;</span>);   <span class="comment">%读取图像</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);imshow(img);title(<span class="string">&#x27;原图&#x27;</span>);</span><br><span class="line"></span><br><span class="line">gray = rgbTogray(img);  <span class="comment">%将图像转化成灰度图，图像的数值范围为【0，255】</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>);imshow(gray);title(<span class="string">&#x27;灰度图&#x27;</span>);</span><br><span class="line"></span><br><span class="line">[M,N]=<span class="built_in">size</span>(gray);</span><br><span class="line">x=apartfourier1(gray);</span><br><span class="line">x1=<span class="built_in">log</span>(<span class="built_in">abs</span>(x)+<span class="number">1</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>);imshow(x1,[]);title(<span class="string">&#x27;傅里叶变换图&#x27;</span>);</span><br><span class="line"></span><br><span class="line">recover=ifft2(x);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>);imshow(recover,[]);title(<span class="string">&#x27;恢复图像&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x=<span class="number">1</span>:M</span><br><span class="line">    <span class="keyword">for</span> y=<span class="number">1</span>:N</span><br><span class="line">        fs(x,y) = double(gray(x,y))*<span class="built_in">exp</span>(<span class="number">1</span><span class="built_in">i</span>*<span class="number">2</span>*<span class="built_in">pi</span>*((M/<span class="number">2</span>)*x/M+(N/<span class="number">2</span>)*y/N));</span><br><span class="line">        <span class="comment">%傅里叶变换对的平移性质；</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">FS = apartfourier1(fs);</span><br><span class="line">FS1 = <span class="built_in">log</span>(<span class="built_in">abs</span>(FS)+<span class="number">1</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>);imshow(FS1,[]);title(<span class="string">&#x27;傅里叶变换图(频移后)&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>=<span class="title">apartfourier1</span><span class="params">(gray)</span></span></span><br><span class="line"><span class="comment">%两次可分离性傅里叶变换，时间复杂度为o(n^3)</span></span><br><span class="line">[M,N]=<span class="built_in">size</span>(gray);</span><br><span class="line">Fx = <span class="built_in">zeros</span>(M,N);</span><br><span class="line">F = <span class="built_in">zeros</span>(M,N);</span><br><span class="line"><span class="keyword">for</span> x = <span class="number">1</span>:M</span><br><span class="line">    <span class="keyword">for</span> v = <span class="number">1</span>:N</span><br><span class="line">        <span class="keyword">for</span> y = <span class="number">1</span>:N</span><br><span class="line">            Fx(x,v) = Fx(x,v)+ double(gray(x,y))* <span class="built_in">exp</span>(<span class="number">1</span><span class="built_in">i</span>*(<span class="number">-1</span>)* <span class="number">2</span> * <span class="built_in">pi</span> * (v*y/N));</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> v = <span class="number">1</span>:N</span><br><span class="line">    <span class="keyword">for</span> u = <span class="number">1</span>:M</span><br><span class="line">        <span class="keyword">for</span>  x= <span class="number">1</span>:M</span><br><span class="line">            F(u,v) = F(u,v)+ double(Fx(x,v))* <span class="built_in">exp</span>(<span class="number">1</span><span class="built_in">i</span>*(<span class="number">-1</span>)* <span class="number">2</span> * <span class="built_in">pi</span> * (u*x/M));</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>   <span class="title">gray</span> = <span class="title">rgbTogray</span><span class="params">(img)</span></span></span><br><span class="line"><span class="comment">%进行RGB到灰度图的转换</span></span><br><span class="line"></span><br><span class="line">[rows,cols,colors] = <span class="built_in">size</span>(img);</span><br><span class="line"><span class="comment">%得到原来图像的矩阵的参数</span></span><br><span class="line"></span><br><span class="line">gray = <span class="built_in">zeros</span>(rows,cols);</span><br><span class="line">gray = uint8(gray);</span><br><span class="line"><span class="comment">%将创建的全零矩阵转化为uint8格式，因为用上面的语句创建之后图像是double型的  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:rows  </span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:cols  </span><br><span class="line">        sum = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span> k = <span class="number">1</span>:colors  </span><br><span class="line">            sum = sum + img(<span class="built_in">i</span> , <span class="built_in">j</span> , k) / <span class="number">3</span>;</span><br><span class="line">            <span class="comment">%进行转化的关键公式，sum每次都因为后面的数字而不能超过255  </span></span><br><span class="line">        <span class="keyword">end</span>  </span><br><span class="line">        gray(<span class="built_in">i</span> , <span class="built_in">j</span>) = sum;  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="快速傅立叶变换-1"><a href="#快速傅立叶变换-1" class="headerlink" title="快速傅立叶变换"></a>快速傅立叶变换</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%主程序</span></span><br><span class="line">img = imread(<span class="string">&#x27;HUST.jpg&#x27;</span>);   <span class="comment">%读取图像</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);imshow(img);title(<span class="string">&#x27;原图&#x27;</span>);</span><br><span class="line"></span><br><span class="line">gray = rgbTogray(img);  <span class="comment">%将图像转化成灰度图，图像的数值范围为【0，255】</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>);imshow(gray);title(<span class="string">&#x27;灰度图&#x27;</span>);</span><br><span class="line"></span><br><span class="line">[M,N]=<span class="built_in">size</span>(gray);</span><br><span class="line"></span><br><span class="line">x = fastfourier(gray);    <span class="comment">%进行二维快速傅里叶变换</span></span><br><span class="line">x1=<span class="built_in">log</span>(<span class="built_in">abs</span>(x)+<span class="number">1</span>);</span><br><span class="line"><span class="comment">%这里取模是因为傅里叶变换后数值范围很大，maxX = 2.04e+05，minX = 0.009，若不进行取模则会导致输出图像全黑</span></span><br><span class="line"><span class="comment">%（x+1）是因为对(0，1)之间的x值，经过log(X)变换后会变成负数，而log(X+1)则将所有的x值，映射成正数，数值范围也更小一些。</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>);imshow(x1,[]);title(<span class="string">&#x27;傅里叶变换图&#x27;</span>);</span><br><span class="line"><span class="comment">%mshow(x1,[]) 会根据灰度图的数值范围来显示图像</span></span><br><span class="line"></span><br><span class="line">recover=ifft2(x);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>);imshow(recover,[]);title(<span class="string">&#x27;恢复图像&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x=<span class="number">1</span>:M</span><br><span class="line">    <span class="keyword">for</span> y=<span class="number">1</span>:N</span><br><span class="line">        fs(x,y) = double(gray(x,y))*<span class="built_in">exp</span>(<span class="number">1</span><span class="built_in">i</span>*<span class="number">2</span>*<span class="built_in">pi</span>*((M/<span class="number">2</span>)*x/M+(N/<span class="number">2</span>)*y/N));</span><br><span class="line">        <span class="comment">%傅里叶变换对的平移性质；</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">FS = fastfourier(fs);</span><br><span class="line">FS1 = <span class="built_in">log</span>(<span class="built_in">abs</span>(FS)+<span class="number">1</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>);imshow(FS1,[]);title(<span class="string">&#x27;傅里叶变换图(频移后)&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>   <span class="title">gray</span> = <span class="title">rgbTogray</span><span class="params">(img)</span></span></span><br><span class="line"><span class="comment">%进行RGB到灰度图的转换</span></span><br><span class="line"></span><br><span class="line">[rows,cols,colors] = <span class="built_in">size</span>(img)</span><br><span class="line">;<span class="comment">%得到原来图像的矩阵的参数</span></span><br><span class="line"></span><br><span class="line">gray = <span class="built_in">zeros</span>(rows,cols);</span><br><span class="line">gray = uint8(gray);</span><br><span class="line"><span class="comment">%将创建的全零矩阵转化为uint8格式，因为用上面的语句创建之后图像是double型的  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:rows  </span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:cols  </span><br><span class="line">        sum = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span> k = <span class="number">1</span>:colors  </span><br><span class="line">            sum = sum + img(<span class="built_in">i</span> , <span class="built_in">j</span> , k) / <span class="number">3</span>;</span><br><span class="line">            <span class="comment">%进行转化的关键公式，sum每次都因为后面的数字而不能超过255  </span></span><br><span class="line">        <span class="keyword">end</span>  </span><br><span class="line">        gray(<span class="built_in">i</span> , <span class="built_in">j</span>) = sum;  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[m]</span> = <span class="title">fastfourier</span><span class="params">(gray)</span></span></span><br><span class="line"><span class="comment">%快速傅里叶变换的实现算法；</span></span><br><span class="line"><span class="comment">%gray为灰度图矩阵</span></span><br><span class="line"><span class="comment">%时间复杂度为（N*logN）</span></span><br><span class="line"></span><br><span class="line">gray=double(gray);</span><br><span class="line"><span class="comment">%matlab不支持图像的无符号整型计算</span></span><br><span class="line">[X,Y]=<span class="built_in">size</span>(gray);</span><br><span class="line"><span class="comment">%得到gray的行列数</span></span><br><span class="line">M2=<span class="built_in">nextpow2</span>(Y);<span class="comment">%求解最靠近Y的2的整次幂的数字</span></span><br><span class="line">N2=<span class="number">2</span>^M2;</span><br><span class="line">M1=<span class="built_in">nextpow2</span>(X);</span><br><span class="line">N1=<span class="number">2</span>^M1;</span><br><span class="line">m=<span class="built_in">zeros</span>(N1,N2);<span class="comment">%构造一个全矩阵，用来存放fastfourier的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%将矩阵m扩展为N1*N2的矩阵</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:X</span><br><span class="line">    m(<span class="built_in">i</span>,:)=[gray(<span class="built_in">i</span>,:),<span class="built_in">zeros</span>(<span class="number">1</span>,N2-Y)];<span class="comment">%若该矩阵的行列数小于N1或者N2，对其尾部补0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%对矩阵的每一行进行倒序</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:N1</span><br><span class="line">    m(<span class="built_in">i</span>,:)=invert(m(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">temp=<span class="number">0</span>;<span class="comment">%行列变换的参数</span></span><br><span class="line">W=<span class="built_in">exp</span>(-<span class="built_in">j</span>*<span class="number">2</span>*<span class="built_in">pi</span>/N2);</span><br><span class="line">m=DieXing(m,M2,N2,W,temp);  <span class="comment">%对逆序后矩阵的每一行进行蝶形运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%同理对列进行同样操作</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:N2</span><br><span class="line">    m(:,<span class="built_in">i</span>)=invert(m(:,<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">temp=<span class="number">1</span>;</span><br><span class="line">W=<span class="built_in">exp</span>(-<span class="built_in">j</span>*<span class="number">2</span>*<span class="built_in">pi</span>/N1);</span><br><span class="line">m=DieXing(m,M1,N1,W,temp);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[x]</span>=<span class="title">invert</span><span class="params">(x)</span></span></span><br><span class="line"><span class="comment">%完成fastfourier变换中序列的逆序</span></span><br><span class="line"><span class="comment">%该函数在fastfourier函数中被调用</span></span><br><span class="line"><span class="comment">%输入x为一维行矩阵</span></span><br><span class="line"></span><br><span class="line">N = <span class="built_in">length</span>(x);<span class="comment">%计算输入序列的长度</span></span><br><span class="line">              <span class="comment">%n = nextpow(x) ;</span></span><br><span class="line">              <span class="comment">%N=2n;</span></span><br><span class="line"></span><br><span class="line">M = N/<span class="number">2</span>;  </span><br><span class="line"><span class="comment">% M 是 M位二进制数最高位的权值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">j</span> = M+<span class="number">1</span>;     </span><br><span class="line"><span class="comment">%由于matlab的数组下标从1开始，所以后移一个下标，</span></span><br><span class="line"><span class="comment">%即下标j处的值为M位二进制的权值，x(j)三M;</span></span><br><span class="line"></span><br><span class="line">N1 = N<span class="number">-2</span>;   </span><br><span class="line"><span class="comment">%进行倒序时第一个数和最后一个数的位置一定不动</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:N1+<span class="number">1</span> </span><br><span class="line"><span class="comment">%仅将第二个到倒数第二个数进行倒序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">i</span>&lt;<span class="built_in">j</span> </span><br><span class="line">    <span class="comment">%如果该下标小于最高位的权值，直接进行数值交换</span></span><br><span class="line"></span><br><span class="line">    temp = x(<span class="built_in">i</span>);</span><br><span class="line">    x(<span class="built_in">i</span>) = x(<span class="built_in">j</span>);</span><br><span class="line">    x(<span class="built_in">j</span>) =temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">K = M;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">j</span> - <span class="number">1</span> &gt;= K) </span><br><span class="line">    <span class="comment">%由于matlab 的数組下标从1开始。如果下标超过该权值</span></span><br><span class="line">        <span class="built_in">j</span>=<span class="built_in">j</span>-K;</span><br><span class="line">            <span class="comment">%首先将该位由1变为0</span></span><br><span class="line">         </span><br><span class="line">     K = <span class="built_in">round</span>(K/<span class="number">2</span>) ;</span><br><span class="line">             <span class="comment">%次高位的权值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="built_in">j</span>=<span class="built_in">j</span>+K;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>=<span class="title">DieXing</span><span class="params">(m,M,N,W,temp)</span></span></span><br><span class="line"><span class="comment">%对矩阵m进行蝶形运算</span></span><br><span class="line"><span class="comment">%,M为蝶形运算的最大级数</span></span><br><span class="line"><span class="comment">%W为旋转因子</span></span><br><span class="line"><span class="comment">%temp为参数，控制行列的变换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> L=<span class="number">1</span>:M   </span><br><span class="line">    <span class="comment">%M为蝶形运算的最大级数</span></span><br><span class="line"></span><br><span class="line">    B=<span class="number">2</span>^(L<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> J=<span class="number">0</span>:B<span class="number">-1</span> <span class="comment">%控制旋转因子的系数</span></span><br><span class="line">    p=J*<span class="number">2</span>^(M-L);</span><br><span class="line">    WN=W^p;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k=J+<span class="number">1</span>:<span class="number">2</span>^L:N</span><br><span class="line">        kb=k+B;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> temp == <span class="number">0</span><span class="comment">%进行行计算</span></span><br><span class="line">                WX = m(:, kb) *WN;</span><br><span class="line">                m(:,kb) = m(:,k) - WX;<span class="comment">%先减后加，可以不用构造新的矩阵来存</span></span><br><span class="line">                                      <span class="comment">%由于该句修改了m(:,kb) 的值，而下句需要</span></span><br><span class="line">                                      <span class="comment">%所以要提前计算WX=m(kb,:) *WN;</span></span><br><span class="line">                m(:,k) = m(:,k)+ WX;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> temp == <span class="number">1</span><span class="comment">%进行列计算</span></span><br><span class="line">                WX= m(kb, :)*WN;</span><br><span class="line">                m(kb,:)= m(k,:)-WX;</span><br><span class="line">                m(k,:)= m(k,:)+ WX;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<h3 id="效果展示与结果分析"><a href="#效果展示与结果分析" class="headerlink" title="效果展示与结果分析"></a>效果展示与结果分析</h3><p>为了检验傅立叶变换的有效性，调用matlab中的ifft2（）函数进行傅立叶逆变换还原图像，检验傅立叶变换是否正确。</p>
<h4 id="调用系统函数-1"><a href="#调用系统函数-1" class="headerlink" title="调用系统函数"></a>调用系统函数</h4><h5 id="1-效果图"><a href="#1-效果图" class="headerlink" title="1.效果图"></a>1.效果图</h5><p><img src="C:\Users\86153\Desktop\系统函数.PNG" alt="效果图"></p>
<p><img src="C:\Users\86153\Desktop\系统函数耗时.PNG" alt="耗时分析"></p>
<h5 id="2-结果分析"><a href="#2-结果分析" class="headerlink" title="2.结果分析"></a>2.结果分析</h5><p>matlab的底层函数包括傅立叶变换fft2（），频移函数fftshift()都能很好地实现傅立叶变换，并且耗时仅0.468s，查阅资料可知核心思想时矩阵乘法运算实现。</p>
<h4 id="分离性傅立叶变换-1"><a href="#分离性傅立叶变换-1" class="headerlink" title="分离性傅立叶变换"></a>分离性傅立叶变换</h4><h5 id="1-效果图-1"><a href="#1-效果图-1" class="headerlink" title="1.效果图"></a>1.效果图</h5><p><img src="C:\Users\86153\Desktop\分离性.PNG"></p>
<p><img src="C:\Users\86153\Desktop\分离性耗时.PNG"></p>
<h5 id="2-结果分析-1"><a href="#2-结果分析-1" class="headerlink" title="2.结果分析"></a>2.结果分析</h5><p>由上图可知，分离性傅里叶变换不会导致逆变换后的灰度图失真，但最大问题是算法复杂度仍为o（n^3），耗时209.75s，但相比定义实现还是远远降低了复杂度，并且与自行设计的快速傅里叶变换算法相比，优点是不会出现黑色边框，经过傅里叶正逆变换后能很好地实现图像保真。</p>
<h4 id="快速傅立叶变换-2"><a href="#快速傅立叶变换-2" class="headerlink" title="快速傅立叶变换"></a>快速傅立叶变换</h4><p>#####　１．效果图</p>
<p><img src="C:\Users\86153\Desktop\快速傅里叶变换.PNG"></p>
<p><img src="C:\Users\86153\Desktop\快速傅里叶变换耗时.PNG"></p>
<h5 id="2-结果分析-2"><a href="#2-结果分析-2" class="headerlink" title="2.结果分析"></a>2.结果分析</h5><p>由上图可知，傅里叶逆变换后图像出现黑色边框，原因是因为在进行快速傅里叶变换函数中对存放傅里叶变换结果的m矩阵进行了扩充（原因是在进行分解时用了nextpow2求解图像矩阵行列的最接近2次幂的数），而m矩阵的行列数小于新产生的傅里叶变换矩阵，并且在补充部分添0，所以在进行逆变换时出现黑色边框，但观察灰度图可知其仍然可以很好地复原图像，可知此快速傅里叶变换结果有效。</p>
<p>而耗时为1.958s,远大于系统的快速傅里叶变换函数，考虑是因为上面提到的矩阵扩充带来的冗余以及算法设计不足，但耗时远远小于分离性傅里叶变换的耗时，说明基本达到降低算法复杂度的目标。</p>
<h4 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h4><h5 id="1-初次实验产生傅里叶变换图像全黑"><a href="#1-初次实验产生傅里叶变换图像全黑" class="headerlink" title="1.初次实验产生傅里叶变换图像全黑"></a>1.初次实验产生傅里叶变换图像全黑</h5><p><img src="C:\Users\86153\Desktop\全黑.PNG"></p>
<p>分析：通过网上查阅资料可知在进行傅里叶变换再取模后数值范围很大，maxX = 2.04e+05，minX = 0.009，此时会导致低频成分占多数，输出图像全黑。</p>
<p>解决办法：对傅里叶变换后的矩阵取模在log运算，对频谱进行缩放，而使用abs（x）+1是因为对于（0，1）之间的x值经过取对数后会变成负值，而log（x+1）则将所有的x值映射到正数范围内。</p>
<h5 id="2-为什么要将RGB图转化为灰度图再进行傅里叶变换？"><a href="#2-为什么要将RGB图转化为灰度图再进行傅里叶变换？" class="headerlink" title="2.为什么要将RGB图转化为灰度图再进行傅里叶变换？"></a>2.为什么要将RGB图转化为灰度图再进行傅里叶变换？</h5><p>分析：对于RGB真彩图像来说，读入后是以三维矩阵形式存储的，如果此时直接进行傅里叶变换，则频谱图会显示为一片空白或者是密密麻麻的。所以在对RGB图像进行傅里叶变换前要进行类型转换，使用rgb2gray将其转换为灰度图像，使用rgb2gray其频谱图呈灰色基调。</p>
<h5 id="3-imshow-img-与imshow（img，-）有什么区别？"><a href="#3-imshow-img-与imshow（img，-）有什么区别？" class="headerlink" title="3.imshow(img)与imshow（img，[]）有什么区别？"></a>3.imshow(img)与imshow（img，[]）有什么区别？</h5><p>使用imshow函数显示图像时要注意图像矩阵类型，当图像是double类型时要使用imshow（I,[]）来根据数据矩阵的数值范围自动设置灰度图像显示范围，而imgshow（img）中img的类型是unit8类型，取值范围为[0,255],可以完整显示颜色；</p>
<h3 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h3><p>这次实验与大二上的数据结构课设有相似之处，但对于matlab的使用让我感觉到在进行简单图像处理时matlab要比opencv库要简单许多，并且matlab上手较为容易，在编写脚本程序时语法规则简单，是很好的计算软件，这次实验让我熟悉了matlab的基本操作，也对于傅里叶变换的物理意义有了一个较全面的了解。</p>
]]></content>
      <categories>
        <category>matlab</category>
      </categories>
      <tags>
        <tag>matlab 图像处理 傅里叶变换</tag>
      </tags>
  </entry>
</search>
